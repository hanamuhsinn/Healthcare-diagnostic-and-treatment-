{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hanamuhsinn/Healthcare-diagnostic-and-treatment-/blob/main/phase_5.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "22rYO3jWI9Zo",
        "outputId": "54d437dd-f28d-4880-9b9d-19aa35df9df6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Try program: FINAL Smart AI Healthcare Assistant – 7 Diseases, Treatment, Medicine Advice\n",
            "\n",
            "[Bot] Disclaimer: This is not professional medical advice. Consult a doctor before taking any medication.\n",
            "\n",
            "Enter your name (or 'exit' to quit): hana\n",
            "\n",
            "Hi hana, please describe your symptoms in one sentence.\n",
            "Examples: 'I have a fever', 'tingling in legs', 'pain in stomach', 'persistent cough', 'severe headache', 'chest pain', 'sore throat'\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import datetime\n",
        "\n",
        "# -------------------------------------- #\n",
        "# Symptom-Disease Database (7 conditions)\n",
        "# -------------------------------------- #\n",
        "disease_db = {\n",
        "    \"fever\": {\n",
        "        \"disease\": \"Viral Infection\",\n",
        "        \"treatment\": {\n",
        "            \"medicines\": [\"Paracetamol – consult doctor for dosage\", \"ORS sachets – as needed\"],\n",
        "            \"lifestyle\": \"Rest well, avoid cold food/drinks, stay hydrated.\",\n",
        "            \"note\": \"Usually caused by viral or seasonal infection.\"\n",
        "        },\n",
        "        \"urgency\": \"low\"\n",
        "    },\n",
        "    \"tingling in legs\": {\n",
        "        \"disease\": \"Peripheral Neuropathy\",\n",
        "        \"treatment\": {\n",
        "            \"medicines\": [\"Vitamin B12 supplements – consult doctor\", \"Gabapentin – prescription only\"],\n",
        "            \"lifestyle\": \"Avoid alcohol, maintain healthy diet, exercise lightly.\",\n",
        "            \"note\": \"May be caused by nerve damage or vitamin deficiency.\"\n",
        "        },\n",
        "        \"urgency\": \"medium\"\n",
        "    },\n",
        "    \"pain in stomach\": {\n",
        "        \"disease\": \"Gastritis\",\n",
        "        \"treatment\": {\n",
        "            \"medicines\": [\"Antacids – as needed\", \"Omeprazole – consult doctor\"],\n",
        "            \"lifestyle\": \"Avoid spicy/oily food, eat small meals, reduce stress.\",\n",
        "            \"note\": \"May be caused by infection or dietary habits.\"\n",
        "        },\n",
        "        \"urgency\": \"medium\"\n",
        "    },\n",
        "    \"cough\": {\n",
        "        \"disease\": \"Bronchitis\",\n",
        "        \"treatment\": {\n",
        "            \"medicines\": [\"Cough syrup – consult doctor for type\", \"Inhaler – if prescribed\"],\n",
        "            \"lifestyle\": \"Avoid smoking, stay warm, use a humidifier.\",\n",
        "            \"note\": \"May be viral or bacterial; persistent cough needs medical evaluation.\"\n",
        "        },\n",
        "        \"urgency\": \"medium\"\n",
        "    },\n",
        "    \"headache\": {\n",
        "        \"disease\": \"Tension Headache\",\n",
        "        \"treatment\": {\n",
        "            \"medicines\": [\"Ibuprofen – consult doctor for dosage\", \"Hydration salts – as needed\"],\n",
        "            \"lifestyle\": \"Reduce screen time, practice relaxation techniques, ensure adequate sleep.\",\n",
        "            \"note\": \"Often triggered by stress or dehydration.\"\n",
        "        },\n",
        "        \"urgency\": \"low\"\n",
        "    },\n",
        "    \"chest pain\": {\n",
        "        \"disease\": \"Angina\",\n",
        "        \"treatment\": {\n",
        "            \"medicines\": [\"Nitroglycerin – if prescribed\", \"Aspirin – consult doctor\"],\n",
        "            \"lifestyle\": \"Avoid strenuous activity, reduce stress, follow heart-healthy diet.\",\n",
        "            \"note\": \"May indicate a serious heart condition.\"\n",
        "        },\n",
        "        \"urgency\": \"high\"\n",
        "    },\n",
        "    \"sore throat\": {\n",
        "        \"disease\": \"Pharyngitis\",\n",
        "        \"treatment\": {\n",
        "            \"medicines\": [\"Throat lozenges – as needed\", \"Antibiotics – if bacterial, consult doctor\"],\n",
        "            \"lifestyle\": \"Gargle with warm salt water, avoid irritants like smoke, stay hydrated.\",\n",
        "            \"note\": \"Usually viral but may require antibiotics if bacterial.\"\n",
        "        },\n",
        "        \"urgency\": \"low\"\n",
        "    }\n",
        "}\n",
        "\n",
        "# ---------------------------------------------------------- #\n",
        "# Function: Match symptom input to a known symptom in the DB\n",
        "# ---------------------------------------------------------- #\n",
        "def smart_match(symptom_input):\n",
        "    \"\"\"Matches user input to a known symptom using simple word logic.\"\"\"\n",
        "    normalized_input = ' '.join(symptom_input.lower().split())  # Clean spacing and lowercase\n",
        "    for symptom in disease_db:\n",
        "        # Match if full symptom phrase is in input or all words exist\n",
        "        if symptom in normalized_input or all(word in normalized_input.split() for word in symptom.split()):\n",
        "            return symptom\n",
        "    return None\n",
        "\n",
        "# -------------------------------------------- #\n",
        "# Function: Display diagnosis and treatment\n",
        "# -------------------------------------------- #\n",
        "def show_diagnosis(matched_key):\n",
        "    \"\"\"Displays disease info and treatment based on matched symptom.\"\"\"\n",
        "    data = disease_db[matched_key]\n",
        "    print(f\"\\n[Diagnosis] Possible Disease: {data['disease']}\")\n",
        "\n",
        "    # Based on urgency, provide different levels of warning\n",
        "    urgency = data.get('urgency', 'low')\n",
        "    if urgency == \"high\":\n",
        "        print(\"[Bot] This is a serious condition. Seek immediate medical attention.\")\n",
        "    elif urgency == \"medium\":\n",
        "        print(\"[Bot] This condition may require medical attention. Consult a doctor soon.\")\n",
        "    else:\n",
        "        print(\"[Bot] This condition is likely manageable but consult a doctor if symptoms persist.\")\n",
        "\n",
        "    # Show treatment advice\n",
        "    print(\"\\n[Treatment Advice]\")\n",
        "    for med in data['treatment']['medicines']:\n",
        "        print(f\"- Medicine: {med}\")\n",
        "    print(f\"\\n[Lifestyle Tips] {data['treatment']['lifestyle']}\")\n",
        "    print(f\"[Note] {data['treatment']['note']}\")\n",
        "\n",
        "# -------------------------------------------- #\n",
        "# Function: Save user feedback to feedback.log\n",
        "# -------------------------------------------- #\n",
        "def log_feedback(name, fb, user_input):\n",
        "    \"\"\"Logs user feedback with timestamp to a file.\"\"\"\n",
        "    timestamp = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
        "    try:\n",
        "        with open('feedback.log', 'a') as f:\n",
        "            f.write(f\"[{timestamp}] User: {name}, Helpful: {fb}, Symptoms: {user_input}\\n\")\n",
        "    except IOError as e:\n",
        "        print(f\"[Bot] Error saving feedback: {e}\")\n",
        "\n",
        "# -------------------------------------------- #\n",
        "# Function: Main chatbot interaction loop\n",
        "# -------------------------------------------- #\n",
        "def chatbot():\n",
        "    \"\"\"Main chatbot loop that handles user interaction.\"\"\"\n",
        "    print(\"Try program: FINAL Smart AI Healthcare Assistant – 7 Diseases, Treatment, Medicine Advice\\n\")\n",
        "    print(\"[Bot] Disclaimer: This is not professional medical advice. Consult a doctor before taking any medication.\")\n",
        "\n",
        "    while True:\n",
        "        name = input(\"\\nEnter your name (or 'exit' to quit): \").strip()\n",
        "        if name.lower() == 'exit':\n",
        "            print(\"[Bot] Goodbye!\")\n",
        "            break\n",
        "        if not name:\n",
        "            print(\"[Bot] Name cannot be empty. Please try again.\")\n",
        "            continue\n",
        "\n",
        "        print(f\"\\nHi {name}, please describe your symptoms in one sentence.\")\n",
        "        print(\"Examples: 'I have a fever', 'tingling in legs', 'pain in stomach', 'persistent cough', 'severe headache', 'chest pain', 'sore throat'\\n\")\n",
        "\n",
        "        user_input = input(\"You: \").strip().lower()\n",
        "        if not user_input:\n",
        "            print(\"[Bot] Symptoms cannot be empty. Please try again.\")\n",
        "            continue\n",
        "\n",
        "        matched = smart_match(user_input)\n",
        "        if matched:\n",
        "            show_diagnosis(matched)\n",
        "        else:\n",
        "            print(\"\\n[Bot] Sorry, your symptoms didn't match any known condition. Please consult a doctor.\")\n",
        "\n",
        "        fb = input(\"\\n[Bot] Was this helpful? (yes/no): \").strip().lower()\n",
        "        if fb in [\"yes\", \"y\"]:\n",
        "            print(\"[Bot] Glad to assist! Take care.\")\n",
        "        else:\n",
        "            print(\"[Bot] Thank you for your feedback. We'll try to improve.\")\n",
        "\n",
        "        # Save feedback to log\n",
        "        log_feedback(name, fb, user_input)\n",
        "\n",
        "# -------------------------------------------- #\n",
        "# Program entry point\n",
        "# -------------------------------------------- #\n",
        "if __name__ == \"__main__\":\n",
        "    chatbot()\n"
      ]
    }
  ]
}
